Event Handling
---------------
The core of Spring is the ApplicationContext, which manages the complete life cycle of the beans. 

The ApplicationContext publishes certain types of events when loading the beans. 

For example, a ContextStartedEvent is published when the context is started and 
ContextStoppedEvent is published when the context is stopped.

Event handling in the ApplicationContext is provided through the ApplicationEvent 
and ApplicationListener interface.


If a bean implements the ApplicationListener, then every time an ApplicationEvent 
gets published to the ApplicationContext, that bean is notified.


Standard events of Spring
--------------------------

ContextRefreshedEvent :

This event is published when the ApplicationContext is either initialized or refreshed. 
This can also be raised using the refresh() method on the ConfigurableApplicationContext 
interface.



ContextStartedEvent:

This event is published when the ApplicationContext is started using the start() method 
on the ConfigurableApplicationContext interface. 
You can poll your database or you can restart any stopped application after receiving 
this event.


ContextStoppedEvent:

This event is published when the ApplicationContext is stopped using the stop() method 
on the ConfigurableApplicationContext interface. You can do required housekeep work after 
receiving this event.


ContextClosedEvent:

This event is published when the ApplicationContext is closed using the close() method 
on the ConfigurableApplicationContext interface. A closed context reaches its end of life; 
it cannot be refreshed or restarted.


RequestHandledEvent:

This is a web-specific event telling all beans that an HTTP request has been serviced.


Listening to Events
--------------------

To listen to a context event, a bean should implement the ApplicationListener interface 
which has just one method onApplicationEvent( ContexStoppedEvent cse){

.


